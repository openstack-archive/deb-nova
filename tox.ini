[tox]
minversion = 2.0
envlist = py{34,27},functional,pep8,pip-missing-reqs
skipsdist = True

[testenv]
usedevelop = True
# tox is silly... these need to be separated by a newline....
whitelist_externals = bash
                      find
                      rm
install_command = pip install -c{env:UPPER_CONSTRAINTS_FILE:https://git.openstack.org/cgit/openstack/requirements/plain/upper-constraints.txt} {opts} {packages}
setenv = VIRTUAL_ENV={envdir}
         OS_TEST_PATH=./nova/tests/unit
         LANGUAGE=en_US
         LC_ALL=en_US.utf-8
deps = -r{toxinidir}/test-requirements.txt
# NOTE(mriedem): If py34 fails with "db type could not be determined", delete
# .testrepository and try again. Running py34 before py27 is OK, but not the
# other way around. See: https://bugs.launchpad.net/testrepository/+bug/1212909
commands =
  find . -type f -name "*.pyc" -delete
  py27: bash tools/pretty_tox.sh '{posargs}'
  py{34,35}: bash tools/pretty_tox3.sh '{posargs}'
passenv = http_proxy HTTP_PROXY https_proxy HTTPS_PROXY no_proxy NO_PROXY OS_DEBUG GENERATE_HASHES
# there is also secret magic in pretty_tox.sh which lets you run in a fail only
# mode. To do this define the TRACE_FAILONLY environmental variable.

[testenv:pep8]
basepython = python2.7
deps = hacking
commands =
  bash tools/flake8wrap.sh {posargs}
  # Check that all included JSON files are valid JSON
  bash -c '! find doc/ -type f -name *.json | xargs -t -n1 python -m json.tool 2>&1 > /dev/null | grep -B1 -v ^python'

[testenv:functional]
usedevelop = True
setenv = VIRTUAL_ENV={envdir}
       OS_TEST_PATH=./nova/tests/functional
       LANGUAGE=en_US
commands =
  find . -type f -name "*.pyc" -delete
  bash tools/pretty_tox.sh '{posargs}'

[testenv:api-samples]
usedevelop = True
setenv = VIRTUAL_ENV={envdir}
       GENERATE_SAMPLES=True
       PYTHONHASHSEED=0
       OS_TEST_PATH=./nova/tests/functional/api_sample_tests
       LANGUAGE=en_US
commands =
  find . -type f -name "*.pyc" -delete
  bash tools/pretty_tox.sh '{posargs}'

[testenv:genconfig]
commands = oslo-config-generator --config-file=etc/nova/nova-config-generator.conf

[testenv:genpolicy]
commands = oslopolicy-sample-generator --config-file=etc/nova/nova-policy-generator.conf

[testenv:cover]
# Also do not run test_coverage_ext tests while gathering coverage as those
# tests conflict with coverage.
commands =
  coverage erase
  python setup.py testr --coverage --testr-args='{posargs}'

[testenv:venv]
commands = {posargs}

[testenv:docs]
commands =
  rm -rf doc/source/api doc/build api-guide/build api-ref/build
  python setup.py build_sphinx
  # Check that all included JSON files are valid JSON
  bash -c '! find doc/ -type f -name *.json | xargs -t -n1 python -m json.tool 2>&1 > /dev/null | grep -B1 -v ^python'
  oslo-config-generator --config-file=etc/nova/nova-config-generator.conf
  oslopolicy-sample-generator --config-file=etc/nova/nova-policy-generator.conf
  oslopolicy-list-redundant --namespace nova
  oslopolicy-policy-generator --namespace nova --output-file etc/nova/policy.yaml.merged
  sphinx-build -W -b html api-guide/source api-guide/build/html
  sphinx-build -W -b html api-ref/source api-ref/build/html

[testenv:api-guide]
# This environment is called from CI scripts to test and publish
# the API Guide to developer.openstack.org.
commands =
  sphinx-build -W -b html -d api-guide/build/doctrees api-guide/source api-guide/build/html

[testenv:api-ref]
# This environment is called from CI scripts to test and publish
# the API Ref to developer.openstack.org.
commands =
  rm -rf api-ref/build
  sphinx-build -W -b html -d api-ref/build/doctrees api-ref/source api-ref/build/html

[testenv:bandit]
commands = bandit -c bandit.yaml -r nova -n 5 -ll

[testenv:releasenotes]
commands = bash -c tools/releasenotes_tox.sh

[flake8]
# E125 is deliberately excluded. See
# https://github.com/jcrocholl/pep8/issues/126. It's just wrong.
#
# Most of the whitespace related rules (E12* and E131) are excluded
# because while they are often useful guidelines, strict adherence to
# them ends up causing some really odd code formatting and forced
# extra line breaks. Updating code to enforce these will be a hard sell.
#
# H405 is another one that is good as a guideline, but sometimes
# multiline doc strings just don't have a natural summary
# line. Rejecting code for this reason is wrong.
#
# E251 Skipped due to https://github.com/jcrocholl/pep8/issues/301

ignore = E121,E122,E123,E124,E125,E126,E127,E128,E129,E131,E251,H405
exclude =  .venv,.git,.tox,dist,doc,*lib/python*,*egg,build,tools/xenserver*,releasenotes
# To get a list of functions that are more complex than 25, set max-complexity
# to 25 and run 'tox -epep8'.
# 34 is currently the most complex thing we have
# TODO(jogo): get this number down to 25 or so
max-complexity=35

[hacking]
local-check-factory = nova.hacking.checks.factory
import_exceptions = nova.i18n

[testenv:pip-missing-reqs]
# do not install test-requirements as that will pollute the virtualenv for
# determining missing packages
# this also means that pip-missing-reqs must be installed separately, outside
# of the requirements.txt files
deps = pip_missing_reqs
commands=pip-missing-reqs -d --ignore-file=nova/tests/* --ignore-file=nova/test.py nova

[testenv:bindep]
# Do not install any requirements. We want this to be fast and work even if
# system dependencies are missing, since it's used to tell you what system
# dependencies are missing! This also means that bindep must be installed
# separately, outside of the requirements files, and develop mode disabled
# explicitly to avoid unnecessarily installing the checked-out repo too (this
# further relies on "tox.skipsdist = True" above).
deps = bindep
commands = bindep test
usedevelop = False
